{"version":3,"sources":["infoboxes.js","chart.js","newscard.js","news.js","table.js","utils.js","circledata.js","map.js","App.js","index.js"],"names":["moment","require","Infobox","props","timestamp","title","cases","total","lastUpdated","isActive","handleOnClick","Card","onClick","handleClick","className","Typography","variant","color","style","fontWeight","fontSize","position","top","numeral","format","options","plugins","legend","display","maintainAspectRatio","buildChartData","data","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","countryType","useState","setData","loading","setLoading","backGroundColor","setBackGroundColor","useEffect","a","fetch","then","response","json","timeline","console","log","fetchData","length","datasets","backgroundColor","borderColor","Newscard","img","trailText","webUrl","undefined","src","window","location","News","newsData","setnewsData","res","results","map","item","fields","headline","thumbnail","Table","computedtableData","tableData","sort","b","country","GeneratePopUpData","active","obj","todayCases","activePerOneMillion","recovered","todayRecovered","recoveredPerOneMillion","deaths","todayDeaths","deathsPerOneMillion","Circledata","lat","long","multiplier","countryInfo","openPopup","markerRef","useRef","Circle","ref","pathOptions","fillColor","center","radius","Math","sqrt","Popup","flag","margin","circleType","ChangeView","zoom","changedItem","useMap","toLowerCase","setView","circleMaker","countryData","Map","cords","activeCountry","MapContainer","scrollWheelZoom","TileLayer","attribution","url","App","countries","setCountries","activeBox","setActiveBox","totalCases","totalRecovery","totalDeaths","infoboxData","setInfoBoxData","setTableData","selectedCountry","setSelectedCountry","setCords","updated","selectedCountryData","filter","FormControl","Select","defaultValue","value","onChange","e","target","MenuItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d2a4cecc.chunk.js","sourcesContent":["import { Card, Typography } from \"@material-ui/core\";\r\nimport { FaCaretUp } from \"react-icons/fa\";\r\nimport numeral from \"numeral\";\r\nconst moment = require(\"moment\");\r\n\r\nfunction formatTime(timestamp) {\r\n  return moment(timestamp).format(\"LLL\");\r\n}\r\n\r\nfunction Infobox(props) {\r\n  let { title, cases, total, lastUpdated, isActive, handleOnClick } = props;\r\n\r\n  function getClassNames() {\r\n    if (title === \"Coronavirus Cases\" && isActive === \"Coronavirus Cases\") {\r\n      return \"box activeBoxCases\";\r\n    } else if (title === \"Recovered\" && isActive === \"Recovered\") {\r\n      return \"box recoveredCases\";\r\n    } else if (title === \"Deaths\" && isActive === \"Deaths\") {\r\n      return \" box deathCases\";\r\n    }\r\n    return \"box\";\r\n  }\r\n\r\n  function handleClick(title) {\r\n    handleOnClick(title);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Card onClick={() => handleClick(title)} className={getClassNames()}>\r\n        <Typography variant=\"h6\" color=\"textPrimary\">\r\n          {title}\r\n        </Typography>\r\n        <Typography\r\n          style={{ fontWeight: \"bolder\" }}\r\n          variant=\"subtitle1\"\r\n          color=\"textPrimary\"\r\n        >\r\n          {title === \"Coronavirus Cases\" && (\r\n            <FaCaretUp\r\n              style={{\r\n                color: \"red\",\r\n                fontSize: \"20px\",\r\n                position: \"relative\",\r\n                top: \"2px\",\r\n              }}\r\n            />\r\n          )}\r\n          {title === \"Recovered\" && (\r\n            <FaCaretUp\r\n              style={{\r\n                color: \"green\",\r\n                fontSize: \"20px\",\r\n                position: \"relative\",\r\n                top: \"2px\",\r\n              }}\r\n            />\r\n          )}\r\n          {title === \"Deaths\" && (\r\n            <FaCaretUp\r\n              style={{\r\n                color: \"darkgray\",\r\n                fontSize: \"20px\",\r\n                position: \"relative\",\r\n                top: \"2px\",\r\n              }}\r\n            />\r\n          )}\r\n          {numeral(cases).format(\"0,0\")}\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\" color=\"textPrimary\">{`Total : ${numeral(\r\n          total\r\n        ).format(\"0.0a\")}`}</Typography>\r\n        <Typography\r\n          color=\"textPrimary\"\r\n          style={{ fontSize: \"13.5px\" }}\r\n          variant=\"p\"\r\n        >\r\n          Last Updated : <b>{formatTime(lastUpdated)}</b>\r\n        </Typography>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Infobox;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Card } from \"@material-ui/core\";\r\n\r\nconst options = {\r\n  plugins: {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    maintainAspectRatio: true,\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({\r\n  casesType = \"cases\",\r\n  countryType = \"worldwide\",\r\n  title = \"Coronavirus Cases\",\r\n}) {\r\n  const [data, setData] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [backGroundColor, setBackGroundColor] = useState(\"crimson\");\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    const fetchData = async () => {\r\n      await fetch(\r\n        `https://disease.sh/v3/covid-19/historical/${\r\n          countryType === \"worldwide\" ? \"all\" : countryType\r\n        }?lastdays=30`\r\n      )\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData =\r\n            countryType === \"worldwide\"\r\n              ? buildChartData(data, casesType)\r\n              : buildChartData(data.timeline, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n    setLoading(false);\r\n\r\n    if (title === \"Coronavirus Cases\") {\r\n      setBackGroundColor(\"crimson\");\r\n    } else if (title === \"Recovered\") {\r\n      setBackGroundColor(\"limegreen\");\r\n    } else if (title === \"Deaths\") {\r\n      setBackGroundColor(\"darkgray\");\r\n    }\r\n  }, [casesType, countryType]);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <p>Loading Data....</p>\r\n      ) : (\r\n        <div className=\"chart-container\">\r\n          <Card>\r\n            {data?.length > 0 && (\r\n              <Line\r\n                data={{\r\n                  datasets: [\r\n                    {\r\n                      backgroundColor: backGroundColor,\r\n                      borderColor: backGroundColor,\r\n                      data: data,\r\n                    },\r\n                  ],\r\n                }}\r\n                options={options}\r\n              />\r\n            )}\r\n          </Card>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","export default function Newscard(props) {\r\n  let { img, trailText, title, webUrl } = props;\r\n\r\n  if (img == undefined || trailText == undefined || title == undefined) {\r\n    return null;\r\n  }\r\n\r\n  let handleClick = () => {\r\n    window.location = webUrl;\r\n  };\r\n\r\n  return (\r\n    <div className=\"news-card-container\">\r\n      <img className=\"news-image\" src={img}></img>\r\n      <div className=\"card-body\">\r\n        <p className=\"news-title\">{title}</p>\r\n        <p className=\"news-trail-text\">{trailText}</p>\r\n      </div>\r\n      <div className=\"news-button-container\">\r\n        <button onClick={handleClick} className=\"news-button\">\r\n          Read More\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport Newscard from \"./newscard\";\r\n\r\nexport default function News() {\r\n  const [newsData, setnewsData] = useState([]);\r\n\r\n  useEffect(async () => {\r\n    let res = await fetch(\r\n      \"https://content.guardianapis.com/search?show-fields=all&page=1&page-size=60&q=covid%20AND%20india&from-date=2021-05-05&api-key=1aaec247-7620-4a4c-8699-7cd6777a7705\"\r\n    );\r\n    let data = await res.json();\r\n    setnewsData(data.response.results);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"news-container-title\">\r\n        <h1>Latest News</h1>\r\n      </div>\r\n      <div className=\"news-container\">\r\n        {newsData.map((item) => {\r\n          return (\r\n            <Newscard\r\n              webUrl={item.webUrl}\r\n              trailText={item.fields.trailText}\r\n              title={item.fields.headline}\r\n              img={item.fields.thumbnail}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { Card } from \"@material-ui/core\";\r\nimport { sortByCases } from \"./utils\";\r\nimport numeral from \"numeral\";\r\nfunction Table(props) {\r\n  let { tableData } = props;\r\n  let computedtableData = sortByCases(tableData);\r\n  return (\r\n    <Card>\r\n      <h4 className=\"table-title\">Live Cases By Country</h4>\r\n      <div className=\"table\">\r\n        {computedtableData?.map((item) => {\r\n          return (\r\n            <>\r\n              <tr className=\"table-row\">\r\n                <td className=\"table-data\">{item.country}</td>\r\n                <td className=\"table-data\">\r\n                  {numeral(item.cases).format(\"0,0\")}\r\n                </td>\r\n              </tr>\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","let sortByCases = (data) => data.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n\r\nexport { sortByCases };\r\n","import { Popup, Circle } from \"react-leaflet\";\r\nimport { useRef, useEffect } from \"react\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction GeneratePopUpData(country, active) {\r\n  let obj = {};\r\n  if (active === \"Coronavirus Cases\") {\r\n    obj[\"title\"] = \"Today's Cases\";\r\n    obj[\"stitle\"] = \"Total Cases\";\r\n    obj[\"ptitle\"] = \"Cases Per One Million\";\r\n    obj[\"cases\"] = country.cases;\r\n    obj[\"todayCases\"] = country.todayCases;\r\n    obj[\"casesPerMillion\"] = country.activePerOneMillion;\r\n  } else if (active === \"Recovered\") {\r\n    obj[\"title\"] = \"Today's Recoveries\";\r\n    obj[\"stitle\"] = \"Total Recoveries\";\r\n    obj[\"ptitle\"] = \"Recoveries Per One Million\";\r\n    obj[\"cases\"] = country.recovered;\r\n    obj[\"todayCases\"] = country.todayRecovered;\r\n    obj[\"casesPerMillion\"] = country.recoveredPerOneMillion;\r\n  } else {\r\n    obj[\"title\"] = \"Today's Deaths\";\r\n    obj[\"stitle\"] = \"Total Deaths\";\r\n    obj[\"ptitle\"] = \"Deaths Per One Million\";\r\n    obj[\"cases\"] = country.deaths;\r\n    obj[\"todayDeaths\"] = country.todayDeaths;\r\n    obj[\"casesPerMillion\"] = country.deathsPerOneMillion;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p className=\"popup-data\">{`${obj[\"title\"]} : ${numeral(\r\n        obj[\"todayCases\"]\r\n      ).format(\"0,0\")}`}</p>\r\n      <p className=\"popup-data\">{`${obj[\"stitle\"]} : ${numeral(\r\n        obj[\"cases\"]\r\n      ).format(\"0,0\")}`}</p>\r\n      <p className=\"popup-data\">{`${obj[\"ptitle\"]} : ${numeral(\r\n        obj[\"casesPerMillion\"]\r\n      ).format(\"0,0\")}`}</p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default function Circledata(props) {\r\n  let { lat, long, item, casesType, multiplier, color, active, openPopup } =\r\n    props;\r\n  let { countryInfo } = item;\r\n  const markerRef = useRef(null);\r\n\r\n  // useEffect(() => {\r\n  //   if (openPopup) markerRef.current.leafletElement.openPopup();\r\n  // }, [openPopup]);\r\n\r\n  return (\r\n    <Circle\r\n      ref={markerRef}\r\n      pathOptions={{\r\n        color: color,\r\n        fillColor: color,\r\n      }}\r\n      center={[lat, long]}\r\n      radius={Math.sqrt(casesType * multiplier) * 1.2}\r\n    >\r\n      <Popup>\r\n        <div className=\"popup-container\">\r\n          <div className=\"popup-left\">\r\n            <img className=\"popup-flag\" src={countryInfo.flag}></img>\r\n            <p style={{ margin: \"5px 0px 0px 0px\" }}>{item.country}</p>\r\n          </div>\r\n          <div className=\"popup-right\">{GeneratePopUpData(item, active)}</div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  );\r\n}\r\n","import {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  Popup,\r\n  useMap,\r\n  Circle,\r\n} from \"react-leaflet\";\r\nimport Circledata from \"./circledata\";\r\nimport numeral from \"numeral\";\r\nimport { Card } from \"@material-ui/core\";\r\n\r\nconst circleType = {\r\n  cases: {\r\n    color: \"crimson\",\r\n    multiplier: 10000,\r\n  },\r\n  recovered: {\r\n    color: \"limegreen\",\r\n    multiplier: 20000,\r\n  },\r\n  deaths: {\r\n    color: \"darkgray\",\r\n    multiplier: 30000,\r\n  },\r\n};\r\n\r\nfunction ChangeView({ center, zoom, changedItem }) {\r\n  const map = useMap();\r\n  if (changedItem.toLowerCase() === \"worldwide\") {\r\n    map.setView(center, 3);\r\n    return null;\r\n  }\r\n  map.setView(center, zoom);\r\n  return null;\r\n}\r\n\r\nfunction circleMaker(countryData, active) {\r\n  let casesType;\r\n  let multiplier;\r\n  let color;\r\n\r\n  if (active === \"Coronavirus Cases\") {\r\n    casesType = \"cases\";\r\n    multiplier = circleType.cases.multiplier;\r\n    color = circleType.cases.color;\r\n  } else if (active === \"Recovered\") {\r\n    casesType = \"recovered\";\r\n    multiplier = circleType.recovered.multiplier;\r\n    color = circleType.recovered.color;\r\n  } else {\r\n    casesType = \"deaths\";\r\n    multiplier = circleType.deaths.multiplier;\r\n    color = circleType.deaths.color;\r\n  }\r\n\r\n  function GeneratePopUpData(country) {\r\n    let obj = {};\r\n    if (active === \"Coronavirus Cases\") {\r\n      obj[\"title\"] = \"Today's Cases\";\r\n      obj[\"stitle\"] = \"Total Cases\";\r\n      obj[\"ptitle\"] = \"Cases Per One Million\";\r\n      obj[\"cases\"] = country.cases;\r\n      obj[\"todayCases\"] = country.todayCases;\r\n      obj[\"casesPerMillion\"] = country.activePerOneMillion;\r\n    } else if (active === \"Recovered\") {\r\n      obj[\"title\"] = \"Today's Recoveries\";\r\n      obj[\"stitle\"] = \"Total Recoveries\";\r\n      obj[\"ptitle\"] = \"Recoveries Per One Million\";\r\n      obj[\"cases\"] = country.recovered;\r\n      obj[\"todayCases\"] = country.todayRecovered;\r\n      obj[\"casesPerMillion\"] = country.recoveredPerOneMillion;\r\n    } else {\r\n      obj[\"title\"] = \"Today's Deaths\";\r\n      obj[\"stitle\"] = \"Total Deaths\";\r\n      obj[\"ptitle\"] = \"Deaths Per One Million\";\r\n      obj[\"cases\"] = country.deaths;\r\n      obj[\"todayDeaths\"] = country.todayDeaths;\r\n      obj[\"casesPerMillion\"] = country.deathsPerOneMillion;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <p className=\"popup-data\">{`${obj[\"title\"]} : ${numeral(\r\n          obj[\"todayCases\"]\r\n        ).format(\"0,0\")}`}</p>\r\n        <p className=\"popup-data\">{`${obj[\"stitle\"]} : ${numeral(\r\n          obj[\"cases\"]\r\n        ).format(\"0,0\")}`}</p>\r\n        <p className=\"popup-data\">{`${obj[\"ptitle\"]} : ${numeral(\r\n          obj[\"casesPerMillion\"]\r\n        ).format(\"0,0\")}`}</p>\r\n      </>\r\n    );\r\n  }\r\n\r\n  let test = countryData.map((item) => {\r\n    let { countryInfo } = item;\r\n    let openPopup = false;\r\n    if (item.country === \"India\") openPopup = true;\r\n    let { lat, long } = countryInfo;\r\n    return (\r\n      <Circledata\r\n        openPopup={openPopup}\r\n        active={active}\r\n        lat={lat}\r\n        long={long}\r\n        item={item}\r\n        casesType={item[casesType]}\r\n        multiplier={multiplier}\r\n        color={color}\r\n      />\r\n      // <Circle\r\n      //   ref={markerRef}\r\n      //   pathOptions={{\r\n      //     color: color,\r\n      //     fillColor: color,\r\n      //   }}\r\n      //   center={[lat, long]}\r\n      //   radius={Math.sqrt(item[casesType] * multiplier) * 1.2}\r\n      // >\r\n      //   <Popup>\r\n      //     <div className=\"popup-container\">\r\n      //       <div className=\"popup-left\">\r\n      //         <img className=\"popup-flag\" src={countryInfo.flag}></img>\r\n      //         <p style={{ margin: \"5px 0px 0px 0px\" }}>{item.country}</p>\r\n      //       </div>\r\n      //       <div className=\"popup-right\">{GeneratePopUpData(item)}</div>\r\n      //     </div>\r\n      //   </Popup>\r\n      // </Circle>\r\n    );\r\n  });\r\n\r\n  return test;\r\n}\r\n\r\nfunction Map(props) {\r\n  let { cords, countryData, activeCountry, active } = props;\r\n\r\n  return (\r\n    <Card className=\"map-card\">\r\n      <MapContainer center={cords} zoom={1} scrollWheelZoom={false}>\r\n        <ChangeView center={cords} changedItem={activeCountry} zoom={4.5} />\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png\"\r\n        />\r\n        {circleMaker(countryData, active)}\r\n      </MapContainer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Infoboxes from \"./infoboxes\";\nimport Select from \"@material-ui/core/Select\";\nimport Linechart from \"./chart\";\nimport News from \"./news\";\nimport Table from \"./table\";\nimport { useEffect, useState } from \"react\";\nimport Map from \"./map\";\nimport \"./App.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [activeBox, setActiveBox] = useState(\"Coronavirus Cases\");\n  const [infoboxData, setInfoBoxData] = useState({\n    todayCases: null,\n    todayRecovered: null,\n    todayDeaths: null,\n    totalCases: null,\n    totalRecovery: null,\n    totalDeaths: null,\n    lastUpdated: null,\n  });\n  const [tableData, setTableData] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"worldwide\");\n  const [cords, setCords] = useState([50, 20]);\n\n  function getCasesType() {\n    if (activeBox === \"Coronavirus Cases\") {\n      return \"cases\";\n    } else if (activeBox === \"Recovered\") {\n      return \"recovered\";\n    } else {\n      return \"deaths\";\n    }\n  }\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        setCountries(data);\n        setTableData(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (selectedCountry === \"worldwide\") {\n      fetch(\"https://disease.sh/v3/covid-19/all\")\n        .then((res) => res.json())\n        .then((data) => {\n          let {\n            cases,\n            deaths,\n            recovered,\n            todayCases,\n            todayDeaths,\n            todayRecovered,\n            updated,\n          } = data;\n          setInfoBoxData({\n            todayCases,\n            todayDeaths,\n            todayRecovered,\n            totalCases: cases,\n            totalDeaths: deaths,\n            totalRecovery: recovered,\n            lastUpdated: updated,\n          });\n        });\n      setCords([50, 20]);\n    } else {\n      let selectedCountryData = tableData.filter((item) => {\n        return item.country === selectedCountry;\n      });\n      console.log(\"this is selected country data\", selectedCountryData);\n      let {\n        cases,\n        deaths,\n        recovered,\n        todayCases,\n        todayDeaths,\n        todayRecovered,\n        updated,\n        countryInfo,\n      } = selectedCountryData[0];\n      setInfoBoxData({\n        todayCases,\n        todayDeaths,\n        todayRecovered,\n        totalCases: cases,\n        totalDeaths: deaths,\n        totalRecovery: recovered,\n        lastUpdated: updated,\n      });\n\n      let { lat, long } = countryInfo;\n      let cords = [lat, long];\n      setCords(cords);\n    }\n  }, [selectedCountry]);\n\n  const handleDropDownChange = (e) => {\n    setSelectedCountry(e.target.value);\n  };\n\n  return (\n    <>\n      <div className=\"app\">\n        <div className=\"app-left\">\n          <div className=\"app-header\">\n            <h1>COVID 19 TRACKER</h1>\n            <FormControl>\n              <Select\n                defaultValue=\"worldwide\"\n                variant=\"outlined\"\n                value={selectedCountry}\n                onChange={handleDropDownChange}\n              >\n                <MenuItem key=\"worldwide\" value=\"worldwide\">\n                  Worldwide\n                </MenuItem>\n                {countries.length > 0 &&\n                  countries\n                    .sort((a, b) => {\n                      return a.country > b.country ? -1 : 1;\n                    })\n                    .map((item) => {\n                      return (\n                        <MenuItem key={item.country} value={item.country}>\n                          {item.country}\n                        </MenuItem>\n                      );\n                    })}\n              </Select>\n            </FormControl>\n          </div>\n          <div className=\"app-infoboxes\">\n            <Infoboxes\n              handleOnClick={(title) => setActiveBox(title)}\n              isActive={activeBox}\n              lastUpdated={infoboxData.lastUpdated}\n              title=\"Coronavirus Cases\"\n              cases={infoboxData.todayCases}\n              total={infoboxData.totalCases}\n            />\n            <Infoboxes\n              handleOnClick={(title) => setActiveBox(title)}\n              isActive={activeBox}\n              lastUpdated={infoboxData.lastUpdated}\n              title=\"Recovered\"\n              cases={infoboxData.todayRecovered}\n              total={infoboxData.totalRecovery}\n            />\n            <Infoboxes\n              handleOnClick={(title) => setActiveBox(title)}\n              isActive={activeBox}\n              lastUpdated={infoboxData.lastUpdated}\n              title=\"Deaths\"\n              cases={infoboxData.todayDeaths}\n              total={infoboxData.totalDeaths}\n            />\n          </div>\n          <div className=\"app-map\">\n            <Map\n              active={activeBox}\n              activeCountry={selectedCountry}\n              countryData={countries}\n              cords={cords}\n            />\n          </div>\n        </div>\n        <div className=\"app-right\">\n          <div className=\"app-right-table\">\n            <Table tableData={tableData} />\n          </div>\n\n          <Linechart\n            title={activeBox}\n            casesType={getCasesType()}\n            countryType={selectedCountry}\n          />\n        </div>\n      </div>\n      <div className=\"news-app\">\n        <News />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}